-- vim: filetype=lua

-- udp/tcp dns listening
setLocal("0.0.0.0:53", {})

-- Local Bind
newServer({
	address = "10.67.0.2",
	pool = "bind",
	checkName = "gateway.toskbot.xyz",
})

-- ECS will pass through requester IP
setECSSourcePrefixV4(32)

local nextdns_servers_profile_id = os.getenv("NEXTDNS_SERVERS_PROFILE_ID")
-- NextDNS - Servers
newServer({
	address = "45.90.28.0:443",
	tls = "openssl",
	subjectName = "dns.nextdns.io",
	dohPath = nextdns_servers_profile_id,
	validateCertificates = true,
	checkInterval = 10,
	checkTimeout = 2000,
	pool = "nextdns_servers",
})

-- CloudFlare DNS over TLS
newServer({
	address = "1.1.1.1:853",
	tls = "openssl",
	subjectName = "cloudflare-dns.com",
	validateCertificates = true,
	checkInterval = 10,
	checkTimeout = 2000,
	pool = "cloudflare",
})
newServer({
	address = "1.0.0.1:853",
	tls = "openssl",
	subjectName = "cloudflare-dns.com",
	validateCertificates = true,
	checkInterval = 10,
	checkTimeout = 2000,
	pool = "cloudflare",
})

-- Enable caching
pc = newPacketCache(10000, {
	maxTTL = 86400,
	minTTL = 0,
	temporaryFailureTTL = 60,
	staleTTL = 60,
	dontAge = false,
})
getPool(""):setCache(pc)

-- Request logging, uncomment to log DNS requests/responses to stdout
-- addAction(AllRule(), LogAction("", false, false, true, false, false))
-- addResponseAction(AllRule(), LogResponseAction("", false, true, false, false))

-- Routing rules
addAction("192.168.50.0/24", PoolAction("cloudflare")) -- guest vlan
addAction("192.168.50.0/24", DropAction()) -- stop processing

addAction("zip", DropAction()) -- stop processing

addAction("toskbot.xyz", PoolAction("bind"))
addAction("66.10.in-addr.arpa", PoolAction("bind"))

addAction("10.66.0.0/24", PoolAction("nextdns_servers")) -- lan
addAction("10.66.1.0/24", PoolAction("nextdns_servers")) -- servers vlan
